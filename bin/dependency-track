#!/usr/bin/env node
/**
* This files is meant to give a CLI behavior (options/fuctionality) to this plugin
*/
const {config} = require("../config");
const {isEmpty} = require("../utils/string-utils");
const {loadConfig, ActionMenu} = require("../utils/misc-utils");
const dependencyTrack = require("../index");
const fs = require("fs");
const path = require("path");

const ARGS_WHITELIST = ["-h", "-u", "-cp", "-d", "-f", "-m", "-s", "--version"]
const CONFIGS_WHITELIST = [
    "--apiKey",
    "--dependencyTrackBaseUrl",
    "--projectName",
    "--projectVersion",
    "--projectUUID",
    "--projectClassifier",
    "--projectDescription",
    "--projectTags",
    "--projectGroup",
    "--projectPURL",
    "--failOnError",
];

let arguments = process.argv.slice(2);

// CONFIGS ---------------------------------------------------------------------

config.apiKey = loadConfig("--apiKey", arguments) || config.apiKey;
config.baseUrl = loadConfig("--dependencyTrackBaseUrl", arguments) || config.baseUrl;
config.projectName = loadConfig("--projectName", arguments) || config.projectName;
config.projectVersion = loadConfig("--projectVersion", arguments) || config.projectVersion;
config.projectUUID = loadConfig("--projectUUID", arguments) || config.projectUUID;
config.projectClassifier = loadConfig("--projectClassifier", arguments) || config.projectClassifier;
config.projectDescription = loadConfig("--projectDescription", arguments) || config.projectDescription;
config.projectTags = loadConfig("--projectTags", arguments) || config.projectTags;
config.projectGroup = loadConfig("--projectGroup", arguments) || config.projectGroup;
config.projectPURL = loadConfig("--projectPURL", arguments) || config.projectPURL;
config.projectUpdateIfExist = loadConfig("--projectUpdateIfExist", arguments)?.toLowerCase() === 'true' || config.projectUpdateIfExist;
config.failOnError = loadConfig("--failOnError", arguments) || config.failOnError || false;

// OPTIONS ---------------------------------------------------------------------
new ActionMenu(arguments).help(() => {
    let unknownOptions = arguments.filter(x => x.startsWith("-")).filter(x =>
     !( ARGS_WHITELIST.includes(x) || CONFIGS_WHITELIST.includes(x) )
    );

    if (arguments.includes("-h") || arguments.length <= 0 || unknownOptions.length > 0) {
       if (unknownOptions.length > 0) {
           console.warn("ERROR: Unknown option(s) " + unknownOptions.join(" ") );
       }
       console.log("Usage:  dependency-track [OPTIONS] [path]");
       console.log("Options:");
       console.log("  -h        - this help");
       console.log("  -u        - upload the bom");
       console.log("  -cp       - create or update a project");
       console.log("  -d        - delete, delete the current or any arbitrary project from the server");
       console.log("  -f        - findings, prints out some details of all of the current issues found in the scan");
       console.log("  -m        - metrics, Get and print all metrics from the server");
       console.log("  -s        - score, Get the Risk Score for the current project");
       console.log("  --version - print version number");
       process.exit(0);
    }
}).when("-h", async(self) => {
    self.help();
}).when("-u", async(self, idx) => {
    config.bomFilepath = arguments[idx + 1] || config.bomFilepath;
    await dependencyTrack.uploadbom();
    console.log("Bom file uploaded")
}).when('-cp', async () => {
    const projectUUID = await dependencyTrack.createProject();
    console.log(projectUUID);
}).when("-d", async() => {
    await dependencyTrack.deleteProject();
    console.log(`Project [${config.projectName} - ${config.projectVersion}] has been deleted`)
}).when("-f", async() => {
    const response = dependencyTrack.findings();
    console.log(JSON.stringify(response, null, 2));
}).when("-m", async() => {
    const response = await dependencyTrack.metrics();
    console.log(JSON.stringify(response, null, 2));
}).when("-s", async() => {
    const response = dependencyTrack.metrics();
    console.log(resp.inheritedRiskScore);
}).when("--version", async() => {
    const packageJsonAsString = fs.readFileSync(path.join(__dirname, '../', 'package.json'), "utf-8");
    const packageJson = JSON.parse(packageJsonAsString);
    console.log(packageJson.version);
});
